/*
Copyright (c) 2010, Jason White <whitewaterssoftwareinfo@gmail.com>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of White Waters Software (Jason White) nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL White Waters Software BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#pragma once

#include <SDL.h>
#include "SDL_image.h"
#include "SDL_mixer.h"
#include "SDL_ttf.h"

#include <cstdio>
#include <vector>
#include <iostream>
#include "engin.h"

#ifndef OBJECTS_H_INCLUDED
#define OBJECTS_H_INCLUDED

using namespace std;

class game_object;

namespace var
{
    extern vector<game_object*> _objects_;
    extern vector<SDL_Surface*> _img_;
    extern vector<TTF_Font*> _font_;
    extern vector<Mix_Chunk*> _sound_;
    extern vector<Mix_Music*> _music_;
    extern vector<Mix_Music*> _DEBUG_;

    extern int trigger[33];

    extern bool quit;
    extern bool pause;
    extern int sound_volume;
    extern int music_volume;
    extern int width;
    extern int height;
}

class game_object
{
    public:

    SDL_Surface* sprite;
    SDL_Rect rect;
    std::string type[3];// name , group , controller

    int x;
    int y;
    int z;
    unsigned int self;
    bool dead;

    virtual void update()
    {
    }


    std::string get_type(int typen)
    {
        if (typen==0)
            return type[0];
        if (typen==1)
            return type[1];
        if (typen==2)
            return type[2];
    }

    SDL_Surface * get_sprite()
    {
        return sprite;
    }

    SDL_Rect get_rect()
    {
        return rect;
    }

};

class cpong1 : public game_object
{
    public:

    cpong1( int xx , int yy , int zz )
    {
        rect.x=x;
        rect.y=y;

        x=xx;
        y=yy;
        z=zz;

        type[0]="cpong1"; //system name
        type[1]="pong"; //group
        type[2]="player"; //controler
        dead=0;

        sprite=SDL_CreateRGBSurface(SDL_HWSURFACE, 16, 48, 8, 255, 255, 255, 255);
        SDL_FillRect(sprite, 0, (180,180,180));
        rect.w=sprite->w;
        rect.h=sprite->h;
        rect.x=x;
        rect.y=y;
    }

    virtual void update()
    {
        rect.x=x;
        rect.y=y;

        Uint8 *keystate = SDL_GetKeyState(NULL);
        if ( keystate[SDLK_UP] )
            y-=4;
        if ( keystate[SDLK_DOWN] )
            y+=4;
    }

    ~cpong1()
    {
        SDL_FreeSurface(sprite);
    }
};

class cpong2 : public game_object
{
    public:

    cpong2( int xx , int yy , int zz )
    {
        rect.x=x;
        rect.y=y;

        x=xx;
        y=yy;
        z=zz;

        type[0]="cpong2"; //system name
        type[1]="pong"; //group
        type[2]="cpu"; //controler
        dead=0;

        sprite=SDL_CreateRGBSurface(SDL_HWSURFACE, 16, 48, 8, 255, 255, 255, 255);
        SDL_FillRect(sprite, 0, (180,180,180));
        rect.w=sprite->w;
        rect.h=sprite->h;
        rect.x=x;
        rect.y=y;
    }

    virtual void update()
    {
        rect.x=x;
        rect.y=y;

        if (var::_objects_.at(2)->y-16 > y)
            y+=4;

        if (var::_objects_.at(2)->y-16 < y)
            y-=4;

    }

    ~cpong2()
    {
        SDL_FreeSurface(sprite);
    }
};


class cball : public game_object
{
    public:

    int dir[2];
    short speed;
    unsigned int collide;
    bool collided;

    cball( int xx , int yy , int zz )
    {
        x=xx;
        y=yy;
        z=zz;
        collide=0;
        collided=0;
        speed=6;

        dir[0]=drip_random(0,1);
        dir[1]=drip_random(0,1);

        type[0]="cball"; //system name
        type[1]="ball"; //group
        type[2]="cpu"; //controler
        dead=0;

        sprite=SDL_CreateRGBSurface(SDL_HWSURFACE, 16, 16, 8, 255, 255, 255, 255);
        SDL_FillRect(sprite, 0, (180,180,180));
        rect.w=sprite->w;
        rect.h=sprite->h;
        rect.x=x;
        rect.y=y;

    }

    virtual void update()
    {

        if (x < 0)
        {
            x=320;
            y=240;

            if (dir[0]==0)
                dir[0]=1;
            else
                dir[0]=0;

            dir[1]=drip_random(0,1);
        }

        if (x > 640)
        {
            x=320;
            y=240;

            if (dir[0]==0)
                dir[0]=1;
            else
                dir[0]=0;

            dir[1]=drip_random(0,1);
        }

        if (y < 0)
            dir[1]=1;

        if (y+16 > 480)
            dir[1]=0;

        //movement
        if (dir[0]==0)
            x-=speed;
        else
            x+=speed;

        if (dir[1]==0)
            y-=speed;
        else
            y+=speed;

        rect.x=x;
        rect.y=y;

        collide=drip_rect_collide_all(rect,self);

        if (collide > 0)
        {
            if (collided==1)
                x=646;

            collide-=1;
            collided=1;

            if (var::_objects_.at(collide)->type[1]=="pong")
            {
                if (dir[0]==0)
                    dir[0]=1;
                else
                    dir[0]=0;

                dir[1]=drip_random(0,1);

            }
        }
        else
            collided=0;

    }

    ~cball()
    {
        SDL_FreeSurface(sprite);
    }
};


#endif // OBJECTS_H_INCLUDED
